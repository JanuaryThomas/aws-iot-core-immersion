AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: AWS IoT + Analytics Immerssion

Parameters:
  AppName:
    Type: String
    Default: jt-iot-engineering-immersion

Resources:
  ESPThemostat:
    Type: AWS::IoT::Thing
    Properties:
      ThingName: ESPThemostat

  ESPThemostatLog:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/iot/logs
      RetentionInDays: 1

  ESPThemostatIdentiyPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: true
      IdentityPoolName: !Sub ${AppName}-IdentityPool
      CognitoIdentityProviders:
        - ClientId: !Ref ESPCognitoUserPoolClient
          ProviderName: !GetAtt ESPCognitoUserPool.ProviderName
          ServerSideTokenCheck: true

  ESPThemostatIdentityPoolRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref ESPThemostatIdentiyPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: unauthenticated
      Description: AIM policy for Identity pool to access AWS resources
      Path: /
      Policies:
        - PolicyName: !Sub ${AppName}-IdentityPool-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
                Condition:
                  StringLike:
                    s3:prefix:
                      - '*/'
              - Effect: Allow
                Action: '*'
                Resource: '*'

      RoleName: !Sub ${AppName}-IdentityPool-role
      # Tags:
      #   - Key: bnb:environment-type
      #     Value: dev
      #   - Key: bnb:country
      #     Value: TZ
      #   - Key: bnb:application
      #     Value: Cognito Identity Pool
      #   - Key: bnb:appversion
      #     Value: V1.1

  bnbIdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref ESPThemostatIdentiyPool
      Roles:
        authenticated: !GetAtt ESPThemostatIdentityPoolRole.Arn
        unauthenticated: !GetAtt ESPThemostatIdentityPoolRole.Arn


  # ESPThemostatCertificate:
  #   Type: AWS::IoT::Certificate
  #   Properties:
  #     Status: ACTIVE
  #     CertificateMode: DEFAULT
  #     CACertificatePem:

  ESPThemostatCertAttachment:
    Type: AWS::IoT::ThingPrincipalAttachment
    Properties:
      Principal: arn:aws:iot:eu-west-1:969581262818:cert/8532aa4c201c4c3b1aeb19b5ccb8279776b3649464ecc4040f840b31548b7706
      ThingName: !Ref ESPThemostat

  ESPThemostatPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - iot:*
            Resource: '*'
      PolicyName: ESPThemostatPolicy

  ESPThemostatPoliycAttachment:
    Type: AWS::IoT::PolicyPrincipalAttachment
    Properties:
      PolicyName: !Ref ESPThemostatPolicy
      Principal: arn:aws:iot:eu-west-1:969581262818:cert/8532aa4c201c4c3b1aeb19b5ccb8279776b3649464ecc4040f840b31548b7706

  ESPThemostatDataTargetS3:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      AccessControl: BucketOwnerFullControl
      BucketName: !Sub ${AppName}-datalake

  ESPThemostatKinesisRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: iot.amazonaws.com
            Action: 'sts:AssumeRole'
      Description: Analytics delivery role to deliver the data to kinesis stream
      Path: '/'
      Policies:
        - PolicyName: !Sub ${AppName}_kinesis_delivery_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'firehose:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: '*'
      RoleName: !Sub ${AppName}_kinesis_delivery_role

  ESPThemostatDeliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: !Sub ${AppName}_firehose_delivery_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:AbortMultipartUpload'
                  - 's3:GetBucketLocation'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - '3:ListBucketMultipartUploads'
                  - 's3:PutObject'
                  - 'logs:*'
                  - 'lambda:InvokeFunction'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref ESPThemostatDataTargetS3
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref ESPThemostatDataTargetS3
                      - '/*'
      RoleName: !Sub ${AppName}_firehose_delivery_role


  ESPThemostatFirehoseDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub ${AppName}-Analytics-firehose-stream
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        RoleARN: !GetAtt ESPThemostatDeliveryRole.Arn
        BucketARN: !Join
          - ''
          - - 'arn:aws:s3:::'
            - !Ref ESPThemostatDataTargetS3
        BufferingHints:
          SizeInMBs: 60
          IntervalInSeconds: 60
        CompressionFormat: GZIP

  ESPTempTopicRule:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: ESPTempTopicRule
      TopicRulePayload:
        Actions:
          - Firehose:
              RoleArn: !GetAtt ESPThemostatKinesisRole.Arn
              DeliveryStreamName: !Ref ESPThemostatFirehoseDeliveryStream
        RuleDisabled: false
        Sql: "SELECT * FROM 'espthemostat/temp'"

  ESPCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AppName}-ESPCognitoUserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          Required: true
          Mutable: true

  ESPCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref ESPCognitoUserPool
      ClientName: !Sub ${AppName}-ESPCognitoUserPoolClient
      GenerateSecret: false
      IdTokenValidity: 43200
      TokenValidityUnits:
        IdToken: "seconds"
      AllowedOAuthFlows: [ "code", "implicit" ]
      ExplicitAuthFlows: [ "ALLOW_CUSTOM_AUTH", "ALLOW_REFRESH_TOKEN_AUTH","ALLOW_USER_PASSWORD_AUTH" ,"ALLOW_USER_SRP_AUTH" ]
      AllowedOAuthScopes: [ "aws.cognito.signin.user.admin",  "email", "openid",  "phone",  "profile" ]
      CallbackURLs:
        - http://localhost
      LogoutURLs:
        - http://localhost
      SupportedIdentityProviders:
        - COGNITO
